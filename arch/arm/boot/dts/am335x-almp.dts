// SPDX-License-Identifier: GPL-2.0
/*
 * Copyright (C) 2021 SanCloud - http://www.sancloud.com/
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 */
/dts-v1/;

#include "am33xx.dtsi"
#include <dt-bindings/interrupt-controller/irq.h>


/ {
	model = "SanCloud - Moixa V1";
	compatible = "ti,am33xx";

	cpus {
		cpu@0 {
			cpu0-supply = <&dcdc2_reg>;
		};
	};

	memory@80000000 {
		device_type = "memory";
		reg = <0x80000000 0x10000000>; /* 256 MB */
	};

	chosen {
		stdout-path = &uart0;
	};
  
 	vmmcsd_fixed: fixedregulator0 {
		compatible = "regulator-fixed";
		regulator-name = "vmmcsd_fixed";
		regulator-min-microvolt = <3300000>;
		regulator-max-microvolt = <3300000>;
	};

	wlan_en_reg: fixedregulator@2 {
		compatible = "regulator-fixed";
		regulator-name = "wlan-en-regulator";
		regulator-min-microvolt = <1800000>;
		regulator-max-microvolt = <1800000>;
		startup-delay-us= <70000>;

		/* WL_EN */
		gpio = <&gpio2 22 0>;
		enable-active-high;
	};  
  
};


&rtc {
	system-power-controller;
};


&am33xx_pinmux {
	pinctrl-names = "default";
	pinctrl-0 = <&clkout2_pin>;
  
	clkout2_pin: pinmux_clkout2_pin {
		pinctrl-single,pins = <
			AM33XX_IOPAD(0x9b4, PIN_OUTPUT_PULLDOWN | MUX_MODE3)	/* xdma_event_intr1.clkout2 */
		>;
	};

	cpsw_default: cpsw_default {
		pinctrl-single,pins = <
			/* Slave 1 */
			 AM33XX_IOPAD(0x928, PIN_OUTPUT | MUX_MODE1) /* (K17) mii1_txd0.mii1_txd0 */
			 AM33XX_IOPAD(0x924, PIN_OUTPUT | MUX_MODE1) /* (K16) mii1_txd1.mii1_txd1 */
			 AM33XX_IOPAD(0x914, PIN_OUTPUT | MUX_MODE1) /* (J16) mii1_txen.rmii1_txen */
			 AM33XX_IOPAD(0x90c, PIN_INPUT | MUX_MODE1) /* (J17) mii1_crs.rmii1_crs_dv */
			 AM33XX_IOPAD(0x940, PIN_INPUT | MUX_MODE1) /* (M16) mii1_rxd0.rmii1_rxd0 */
			 AM33XX_IOPAD(0x93c, PIN_INPUT | MUX_MODE1) /* (L15) mii1_rxd1.rmii1_rxd1 */
			 AM33XX_IOPAD(0x910, PIN_INPUT | MUX_MODE1) /* (K15) mii1_rx_err.mii1_rx_err */
       AM33XX_IOPAD(0x944, PIN_INPUT | MUX_MODE0) /* (L18) mii1_refclk.mii1_refclk */
			 /*AM33XX_IOPAD(0x938, PIN_OUTPUT | MUX_MODE7)*/ /* (L16) mii1_rxd2.gpio2_19 */
			 /*AM33XX_IOPAD(0x898, PIN_INPUT | MUX_MODE7)*/ /* (L17) gpmc_wen.gpio2_4 */
      
			/* Slave 2 */
			 AM33XX_IOPAD(0x854, PIN_OUTPUT | MUX_MODE3) /* (K17) gpmc_a5.rmii2_txd0 */
			 AM33XX_IOPAD(0x850, PIN_OUTPUT | MUX_MODE3) /* (K16) gpmc_a4.rmii2_txd1 */
			 AM33XX_IOPAD(0x840, PIN_OUTPUT | MUX_MODE3) /* (J16) gpmc_a0.rmii2_txen */
			 AM33XX_IOPAD(0x870, PIN_INPUT | MUX_MODE3) /* (J17) gpmc_wait0.rmii2_crs_dv */
			 AM33XX_IOPAD(0x86c, PIN_INPUT | MUX_MODE3) /* (M16) gpmc_a11.rmii2_rxd0 */
			 AM33XX_IOPAD(0x868, PIN_INPUT | MUX_MODE3) /* (L15) gpmc_a10.rmii2_rxd1 */
			 AM33XX_IOPAD(0x874, PIN_INPUT | MUX_MODE3) /* (K15) gpmc_wpn.mii2_rx_err */
       AM33XX_IOPAD(0x908, PIN_INPUT | MUX_MODE1) /* (L18) mii1_col.mii2_refclk */
			 /*AM33XX_IOPAD(0x934, PIN_OUTPUT | MUX_MODE7)*/ /* (L16) mii1_rxd3.gpio2_18 */
			 /*AM33XX_IOPAD(0x864, PIN_INPUT | MUX_MODE7)*/ /* (L17) gpmc_a9.gpio1_25 */
		>;
	};

	cpsw_sleep: cpsw_sleep {
		pinctrl-single,pins = <
			/* Slave 1 reset value */
			 AM33XX_IOPAD(0x928, PIN_INPUT_PULLDOWN | MUX_MODE7) /* (K17) mii1_txd0.mii1_txd0 */
			 AM33XX_IOPAD(0x924, PIN_INPUT_PULLDOWN | MUX_MODE7) /* (K16) mii1_txd1.mii1_txd1 */
			 AM33XX_IOPAD(0x914, PIN_INPUT_PULLDOWN | MUX_MODE7) /* (J16) mii1_txen.rmii1_txen */
			 AM33XX_IOPAD(0x90c, PIN_INPUT_PULLDOWN | MUX_MODE7) /* (J17) mii1_crs.rmii1_crs_dv */
			 AM33XX_IOPAD(0x940, PIN_INPUT_PULLDOWN | MUX_MODE7) /* (M16) mii1_rxd0.rmii1_rxd0 */
			 AM33XX_IOPAD(0x93c, PIN_INPUT_PULLDOWN | MUX_MODE7) /* (L15) mii1_rxd1.rmii1_rxd1 */
			 AM33XX_IOPAD(0x910, PIN_INPUT_PULLDOWN | MUX_MODE7) /* (K15) mii1_rx_err.mii1_rx_err */
       AM33XX_IOPAD(0x944, PIN_INPUT_PULLDOWN | MUX_MODE7) /* (L18) mii1_refclk.mii1_refclk */
		   /*AM33XX_IOPAD(0x938, PIN_INPUT_PULLDOWN | MUX_MODE7)*/ /* (L16) mii1_rxd2.gpio2_19 */
		   /*AM33XX_IOPAD(0x898, PIN_INPUT_PULLDOWN | MUX_MODE7)*/ /* (L17) gpmc_wen.gpio2_4 */
      
			/* Slave 2 reset value */
			 AM33XX_IOPAD(0x854, PIN_INPUT_PULLDOWN | MUX_MODE7) /* (K17) gpmc_a5.rmii2_txd0 */
			 AM33XX_IOPAD(0x850, PIN_INPUT_PULLDOWN | MUX_MODE7) /* (K16) gpmc_a4.rmii2_txd1 */
			 AM33XX_IOPAD(0x840, PIN_INPUT_PULLDOWN | MUX_MODE7) /* (J16) gpmc_a0.rmii2_txen */
			 AM33XX_IOPAD(0x870, PIN_INPUT_PULLDOWN | MUX_MODE7) /* (J17) gpmc_wait0.rmii2_crs_dv */
			 AM33XX_IOPAD(0x86c, PIN_INPUT_PULLDOWN | MUX_MODE7) /* (M16) gpmc_a11.rmii2_rxd0 */
			 AM33XX_IOPAD(0x868, PIN_INPUT_PULLDOWN | MUX_MODE7) /* (L15) gpmc_a10.rmii2_rxd1 */
			 AM33XX_IOPAD(0x874, PIN_INPUT_PULLDOWN | MUX_MODE7) /* (K15) gpmc_wpn.mii2_rx_err */
       AM33XX_IOPAD(0x908, PIN_INPUT_PULLDOWN | MUX_MODE7) /* (L18) mii1_col.mii2_refclk */
			 /*AM33XX_IOPAD(0x934, PIN_INPUT_PULLDOWN | MUX_MODE7)*/ /* (L16) mii1_rxd3.gpio2_18 */
			 /*AM33XX_IOPAD(0x864, PIN_INPUT_PULLDOWN | MUX_MODE7)*/ /* (L17) gpmc_a9.gpio1_25 */

		>;
	};

	davinci_mdio_default: davinci_mdio_default {
		pinctrl-single,pins = <
			/* MDIO */
			AM33XX_IOPAD(0x948, PIN_INPUT_PULLUP | SLEWCTRL_FAST | MUX_MODE0)	/* mdio_data.mdio_data */
			AM33XX_IOPAD(0x94c, PIN_OUTPUT_PULLUP | MUX_MODE0)			/* mdio_clk.mdio_clk */
		>;
	};

	davinci_mdio_sleep: davinci_mdio_sleep {
		pinctrl-single,pins = <
			/* MDIO reset value */
			AM33XX_IOPAD(0x948, PIN_INPUT_PULLDOWN | MUX_MODE7)
			AM33XX_IOPAD(0x94c, PIN_INPUT_PULLDOWN | MUX_MODE7)
		>;
	};

	dcan0_pins_s0: dcan0_pins_s0 {
		pinctrl-single,pins = <
			AM33XX_IOPAD(0x97C, 0x32  ) /* d_can0_rx, SLEWCTRL_FAST | RECV_ENABLE | INPUT_PULLUP | MODE2 */
			AM33XX_IOPAD(0x978, 0x12  ) /* d_can0_tx, SLEWCTRL_FAST | OUTPUT_PULLUP | MODE2 */
		>;
	};

	dcan0_pins_s0_sleep: dcan0_pins_s0_sleep {
		pinctrl-single,pins = <
			AM33XX_IOPAD(0x97C, PIN_INPUT_PULLDOWN | MUX_MODE7)  /* d_can0_rx, SLEWCTRL_FAST | RECV_ENABLE | INPUT_PULLUP | MODE7 */
			AM33XX_IOPAD(0x978, PIN_INPUT_PULLDOWN | MUX_MODE7)  /* d_can0_tx, SLEWCTRL_FAST | OUTPUT_PULLUP | MODE7 */
		>;
	};


	mmc1_pins: pinmux_mmc1_pins {
		pinctrl-single,pins = <
			AM33XX_IOPAD(0x960, PIN_INPUT | MUX_MODE7)		/* spio0_cs1.gpio0_6 */
			AM33XX_IOPAD(0x8fc, PIN_INPUT_PULLUP | MUX_MODE0)	/* mmc0_dat0.mmc0_dat0 */
			AM33XX_IOPAD(0x8f8, PIN_INPUT_PULLUP | MUX_MODE0)	/* mmc0_dat1.mmc0_dat1 */
			AM33XX_IOPAD(0x8f4, PIN_INPUT_PULLUP | MUX_MODE0)	/* mmc0_dat2.mmc0_dat2 */
			AM33XX_IOPAD(0x8f0, PIN_INPUT_PULLUP | MUX_MODE0)	/* mmc0_dat3.mmc0_dat3 */
			AM33XX_IOPAD(0x904, PIN_INPUT_PULLUP | MUX_MODE0)	/* mmc0_cmd.mmc0_cmd */
			AM33XX_IOPAD(0x900, PIN_INPUT_PULLUP | MUX_MODE0)	/* mmc0_clk.mmc0_clk */
		>;
	};

	emmc_pins: pinmux_emmc_pins {
		pinctrl-single,pins = <
			AM33XX_IOPAD(0x880, PIN_INPUT_PULLUP | MUX_MODE2) /* gpmc_csn1.mmc1_clk */
			AM33XX_IOPAD(0x884, PIN_INPUT_PULLUP | MUX_MODE2) /* gpmc_csn2.mmc1_cmd */
			AM33XX_IOPAD(0x800, PIN_INPUT_PULLUP | MUX_MODE1) /* gpmc_ad0.mmc1_dat0 */
			AM33XX_IOPAD(0x804, PIN_INPUT_PULLUP | MUX_MODE1) /* gpmc_ad1.mmc1_dat1 */
			AM33XX_IOPAD(0x808, PIN_INPUT_PULLUP | MUX_MODE1) /* gpmc_ad2.mmc1_dat2 */
			AM33XX_IOPAD(0x80c, PIN_INPUT_PULLUP | MUX_MODE1) /* gpmc_ad3.mmc1_dat3 */
			AM33XX_IOPAD(0x810, PIN_INPUT_PULLUP | MUX_MODE1) /* gpmc_ad4.mmc1_dat4 */
			AM33XX_IOPAD(0x814, PIN_INPUT_PULLUP | MUX_MODE1) /* gpmc_ad5.mmc1_dat5 */
			AM33XX_IOPAD(0x818, PIN_INPUT_PULLUP | MUX_MODE1) /* gpmc_ad6.mmc1_dat6 */
			AM33XX_IOPAD(0x81c, PIN_INPUT_PULLUP | MUX_MODE1) /* gpmc_ad7.mmc1_dat7 */
		>;
	};

	mmc3_pins: pinmux_mmc3_pins {
		pinctrl-single,pins = <
			AM33XX_IOPAD(0x88c, PIN_INPUT_PULLUP | MUX_MODE3) /* (V12) gpmc_clk.mmc2_clk */
			AM33XX_IOPAD(0x888, PIN_INPUT_PULLUP | MUX_MODE3) /* (T13) gpmc_csn3.mmc2_cmd */
			AM33XX_IOPAD(0x830, PIN_INPUT_PULLUP | MUX_MODE3) /* (T12) gpmc_ad12.mmc2_dat0 */
			AM33XX_IOPAD(0x834, PIN_INPUT_PULLUP | MUX_MODE3) /* (R12) gpmc_ad13.mmc2_dat1 */
			AM33XX_IOPAD(0x838, PIN_INPUT_PULLUP | MUX_MODE3) /* (V13) gpmc_ad14.mmc2_dat2 */
			AM33XX_IOPAD(0x83c, PIN_INPUT_PULLUP | MUX_MODE3) /* (U13) gpmc_ad15.mmc2_dat3 */
		>;
	};

	wl18xx_pins: pinmux_wl18xx_pins {
		pinctrl-single,pins = <
			AM33XX_IOPAD(0x8e0, PIN_OUTPUT_PULLDOWN | MUX_MODE7)	/* lcd_vsync.gpio2_22 WL_EN */
			AM33XX_IOPAD(0x844, PIN_INPUT_PULLDOWN | MUX_MODE7)	  /* gpmc_a1.gpio1_17 WL_IRQ */
			AM33XX_IOPAD(0x8ec, PIN_OUTPUT_PULLUP | MUX_MODE7)	  /* cd_ac_bias_en.gpio2_25 LS_BUF_EN */
		>;
	};
  
	i2c0_pins: pinmux_i2c0_pins {
		pinctrl-single,pins = <
			AM33XX_IOPAD(0x988, PIN_INPUT_PULLUP | MUX_MODE0)	/* i2c0_sda.i2c0_sda */
			AM33XX_IOPAD(0x98c, PIN_INPUT_PULLUP | MUX_MODE0)	/* i2c0_scl.i2c0_scl */
		>;
	};


	uart0_pins: pinmux_uart0_pins {
		pinctrl-single,pins = <
			AM33XX_IOPAD(0x970, PIN_INPUT_PULLUP | MUX_MODE0)	/* uart0_rxd.uart0_rxd */
			AM33XX_IOPAD(0x974, PIN_OUTPUT_PULLDOWN | MUX_MODE0)	/* uart0_txd.uart0_txd */
		>;
	};

	uart2_pins: uart2_pins_default {
		pinctrl-single,pins = <
			AM33XX_IOPAD(0x92c, PIN_INPUT | MUX_MODE1)  /*  mii1_tx_clk.uart2_rxd */
			AM33XX_IOPAD(0x930, PIN_OUTPUT | MUX_MODE1) /*  mii1_rx_clk.uart2_txd */
			AM33XX_IOPAD(0x878, PIN_OUTPUT | MUX_MODE7) /*  gpmc_ben1.gpio1[28] RTS */
		>;
	};


	uart4_pins: uart4_pins_default {
		pinctrl-single,pins = <
			AM33XX_IOPAD(0x91c, PIN_INPUT | MUX_MODE3) /*  mii1_txd3.uart4_rxd */
   		AM33XX_IOPAD(0x920, PIN_OUTPUT | MUX_MODE3) /*  mii1_txd2.uart4_txd */
			AM33XX_IOPAD(0x8e8, PIN_OUTPUT_PULLUP | MUX_MODE7) /* lcd_pclk.gpio2[24] RTS */
		>;
	};


	uart5_pins: uart5_pins_default {
		pinctrl-single,pins = <
			AM33XX_IOPAD(0x8c4, PIN_INPUT | MUX_MODE4) /* (U2) lcd_data9.uart5_rxd */
			AM33XX_IOPAD(0x8c0, PIN_OUTPUT | MUX_MODE4) /* (U1) lcd_data8.uart5_txd */
			AM33XX_IOPAD(0x8d8, PIN_INPUT | MUX_MODE6) /* (V4) lcd_data14.uart5_ctsn */
			AM33XX_IOPAD(0x8dc, PIN_OUTPUT | MUX_MODE6) /* (T5) lcd_data15.uart5_rtsn */
		>;
	};  
  
};

&uart0 {
	pinctrl-names = "default";
	pinctrl-0 = <&uart0_pins>;

	status = "okay";
};

&uart2 {
    pinctrl-names = "default";
    pinctrl-0 = <&uart2_pins>;
    status = "okay";
    rts-gpio = <&gpio1 28 GPIO_ACTIVE_HIGH>;
    rs485-rts-active-high;
    rs485-rts-delay = <0 0>;
    linux,rs485-enabled-at-boot-time;
};


&uart4 {
    pinctrl-names = "default";
    pinctrl-0 = <&uart4_pins>;
    status = "okay";
    rts-gpio = <&gpio2 24 GPIO_ACTIVE_HIGH>;
    rs485-rts-active-high;
    rs485-rts-delay = <0 0>;
    linux,rs485-enabled-at-boot-time;
};


&uart5 {
  pinctrl-names = "default";
  pinctrl-0 = <&uart5_pins>;
  status = "okay";
  uart-has-rtscts;
};


&usb {
	status = "okay";
};

&usb_ctrl_mod {
	status = "okay";
};

&usb0_phy {
	status = "okay";
};

&usb1_phy {
	status = "okay";
};

&usb0 {
	status = "okay";
	dr_mode = "host";
};

&usb1 {
	status = "okay";
	dr_mode = "host";
};

&cppi41dma  {
	status = "okay";
};

&i2c0 {
	pinctrl-names = "default";
	pinctrl-0 = <&i2c0_pins>;

	status = "okay";
	clock-frequency = <400000>;

	tps: tps@24 {
		reg = <0x24>;
	};

	baseboard_eeprom: baseboard_eeprom@50 {
		compatible = "atmel,24c256";
		reg = <0x50>;

		#address-cells = <1>;
		#size-cells = <1>;
		baseboard_data: baseboard_data@0 {
			reg = <0 0x100>;
		};
	};
  
 	pcf8563: pcf8563@51 {
		device_type = "rtc";
		compatible = "nxp,pcf8563";
		reg = <0x51>;
	};
};


/* Prevent i2c1 working as we need it for VEBUS interface */
&i2c1 {
	pinctrl-0 = "";
	status = "disabled";
};

/* Prevent i2c2 working as we need it for DCAN0 interface */
&i2c2 {
	pinctrl-0 = "";
	status = "disabled";
};


/include/ "tps65217.dtsi"

&tps {
	/*
	 * Configure pmic to enter OFF-state instead of SLEEP-state ("RTC-only
	 * mode") at poweroff.  Most BeagleBone versions do not support RTC-only
	 * mode and risk hardware damage if this mode is entered.
	 *
	 * For details, see linux-omap mailing list May 2015 thread
	 *	[PATCH] ARM: dts: am335x-bone* enable pmic-shutdown-controller
	 * In particular, messages:
	 *	http://www.spinics.net/lists/linux-omap/msg118585.html
	 *	http://www.spinics.net/lists/linux-omap/msg118615.html
	 *
	 * You can override this later with
	 *	&tps {  /delete-property/ ti,pmic-shutdown-controller;  }
	 * if you want to use RTC-only mode and made sure you are not affected
	 * by the hardware problems. (Tip: double-check by performing a current
	 * measurement after shutdown: it should be less than 1 mA.)
	 */

	interrupts = <7>; /* NMI */
	interrupt-parent = <&intc>;

	ti,pmic-shutdown-controller;

	charger {
		status = "okay";
	};

	pwrbutton {
		status = "okay";
	};

	regulators {
		dcdc1_reg: regulator@0 {
			regulator-name = "vdds_dpr";
			regulator-always-on;
		};

		dcdc2_reg: regulator@1 {
			/* VDD_MPU voltage limits 0.95V - 1.26V with +/-4% tolerance */
			regulator-name = "vdd_mpu";
			regulator-min-microvolt = <925000>;
			regulator-max-microvolt = <1351500>;
			regulator-boot-on;
			regulator-always-on;
		};

		dcdc3_reg: regulator@2 {
			/* VDD_CORE voltage limits 0.95V - 1.1V with +/-4% tolerance */
			regulator-name = "vdd_core";
			regulator-min-microvolt = <925000>;
			regulator-max-microvolt = <1150000>;
			regulator-boot-on;
			regulator-always-on;
		};

		ldo1_reg: regulator@3 {
			regulator-name = "vio,vrtc,vdds";
			regulator-always-on;
		};

		ldo2_reg: regulator@4 {
			regulator-name = "vdd_3v3aux";
			regulator-always-on;
		};

		ldo3_reg: regulator@5 {
			regulator-name = "vdd_1v8";
      regulator-min-microvolt = <1800000>;
      regulator-max-microvolt = <1800000>;      
			regulator-always-on;
		};

		ldo4_reg: regulator@6 {
			regulator-name = "vdd_3v3a";
			regulator-always-on;
		};
	};
};

&mmc1 {
	vmmc-supply = <&vmmcsd_fixed>;
	status = "okay";
	bus-width = <0x4>;
	pinctrl-names = "default";
	pinctrl-0 = <&mmc1_pins>;
	cd-gpios = <&gpio0 6 GPIO_ACTIVE_LOW>;
};

&mmc2 {
	vmmc-supply = <&vmmcsd_fixed>;
	pinctrl-names = "default";
	pinctrl-0 = <&emmc_pins>;
	bus-width = <8>;
	status = "okay";
};

&mmc3 {
	dmas = <&edma_xbar 12 0 1
		&edma_xbar 13 0 2>;
	dma-names = "tx", "rx";
	status = "okay";
	vmmc-supply = <&wlan_en_reg>;
	bus-width = <4>;
	non-removable;
	cap-power-off-card;
	ti,needs-special-hs-handling;
	keep-power-in-suspend;
	pinctrl-names = "default";
	pinctrl-0 = <&mmc3_pins &wl18xx_pins>;

	#address-cells = <1>;
	#size-cells = <0>;
	wlcore: wlcore@2 {
		compatible = "ti,wl1835";
		reg = <2>;
		interrupt-parent = <&gpio1>;
		interrupts = <17 IRQ_TYPE_EDGE_RISING>;
	};
};

&gpio2 {
	phy1_reset {
		gpio-hog;
		gpios = <19 GPIO_ACTIVE_HIGH>;
		output-high;
		line-name = "PHY1_RESET";
	};

	phy2_reset {
		gpio-hog;
		gpios = <18 GPIO_ACTIVE_HIGH>;
		output-high;
		line-name = "PHY2_RESET";
	};

	ls_buf_en {
		gpio-hog;
		gpios = <25 GPIO_ACTIVE_HIGH>;
		output-high;
		line-name = "LS_BUF_EN";
	};
};


&cpsw_emac0 {
  phy-handle = <&dp83825_0>;
	phy-mode = "rmii";
	/*dual_emac_res_vlan = <1>;*/
};

&cpsw_emac1 {
	phy-handle = <&dp83825_1>;
	phy-mode = "rmii";
	dual_emac_res_vlan = <2>;
};


&mac {
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&cpsw_default>;
	pinctrl-1 = <&cpsw_sleep>;
	status = "okay";
	dual_emac = <1>;
};

&scm {
	scm_conf: scm_conf@0 {
		phy_gmii_sel: phy-gmii-sel {
			compatible = "ti,am3352-phy-gmii-sel";
			reg = <0x650 0x5>;
			#phy-cells = <2>;
		};
	};
};

&davinci_mdio {
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&davinci_mdio_default>;
	pinctrl-1 = <&davinci_mdio_sleep>;
	status = "okay";

  dp83825_0: ethernet-phy@0 {
    reg = <2>;
  };

  dp83825_1: ethernet-phy@1 {
    reg = <0>;
  };

};


&aes {
	status = "okay";
};

&sham {
	status = "okay";
};

&rtc {
	clocks = <&clk_32768_ck>, <&clk_24mhz_clkctrl AM3_CLK_24MHZ_CLKDIV32K_CLKCTRL 0>;
	clock-names = "ext-clk", "int-clk";
};

&dcan0 {
	#address-cells = <1>;
	#size-cells = <0>;
    pinctrl-names = "default", "sleep"; /* Apply default pinmuxing */
    pinctrl-0 = <&dcan0_pins_s0>;
    pinctrl-1 = <&dcan0_pins_s0_sleep>;
	status = "okay";  /* Switch on DCAN0 */
};


&wkup_m3_ipc {
	ti,scale-data-fw = "am335x-bone-scale-data.bin";
};
